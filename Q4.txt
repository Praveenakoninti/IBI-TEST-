A Promise is basically an object which represents the completion (or failure) of an asynchronous operation along with its result. 

A promise has 3 types of states and based upon these states, the promise executes the results.

Pending: This state represents either an initial state or fulfilled state or rejected state.
Fulfilled: This state represents that the asynchronous operation is successfully completed.
Rejected: This state represents that the asynchronous operation is rejected.
A Promise is executed by using the .then() method written after the declared promise. 
If we need to handle any error which is occurred then we use the .catch() method written after promise. 
We also use the .finally() method if we want to just print our result irrespective of any error that occurred 
during promise execution.
Promise Chaining: Promise Chaining is a simple concept by which we may initialize another promise inside our .then()
method and accordingly we may execute our results. 
The function inside then captures the value returned by the previous promise 
 EX:-
 <script>
	let promise = new Promise((resolve, reject) => {
	resolve("Hello JavaScript");
	});
	
	promise
	.then( function (result1){
		console.log(result1);
		return new Promise((resolve,reject) =>{
			resolve("GFG is awesome");
		})
	})
	.then((result2) => {
		console.log(result2);
	});
</script>

output:
Hello JavaScript
GFG is awesome
As illustrated above, while executing the declared promise we are returning another promise inside the .then() and executing 
our results accordingly. Another then is used to capture the new promise. This is known as promise chaining. This solves the problem of callback hell.
